.color-bg {
  color: var(--background);
}

.fw-400 {
  font-weight: 400;
}

.fw-700 {
  font-weight: 700;
}

.justify-start {
  justify-content: flex-start;
}

.justify-center {
  justify-content: center;
}

.justify-around {
  justify-content: space-around;
}

.content-around {
  align-content: space-around;
}

.align-start {
  align-items: flex-start;
}

.align-center {
  align-items: center;
}

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.list-none {
  list-style: none;
}

.uppercase {
  text-transform: uppercase;
}

.capitalize {
  text-transform: capitalize;
}

.w-auto {
  width: auto;
}

.h-auto {
  height: auto;
}

.no-underline {
  text-decoration-line: none;
}

@media only screen and (min-width: 768px) {
  .md-w-auto {
    width: auto;
  }
  .md-h-auto {
    height: auto;
  }

  .md-align-start {
    align-items: start;
  }
}

// === Config ===

$widthsAndHeights: (
  vw: (
    "30",
    "50",
    "60",
    "70",
    "80",
    "90",
    "100",
  ),
  "p": (
    "100",
  ),
  "rem": (
    "10",
    "20",
  ),
);

$directions: (("row", "row") ("rrow", "row-reverse") ("col", "column") ("rcol", "column-reverse"));

$positions: ("absolute", "relative");

$spacing: (("m", "margin"), ("p", "padding"));
$sides: (("t", "top"), ("b", "bottom"), ("l", "left"), ("r", "right"));
$axes: ("x", "y");
$largest: 6;
$step: 0.25;

// ====== Implementation ======

// === Sizing ===

@each $type, $values in $widthsAndHeights {
  $unit: if($type == "p", "%", $type);

  @each $value in $values {
    .min-h-#{$value}#{$type} {
      min-height: #{$value}#{$unit};
    }

    .h-#{$value}#{$type} {
      height: #{$value}#{$unit};
    }

    .min-w-#{$value}#{$type} {
      min-width: #{$value}#{$unit};
    }

    .w-#{$value}#{$type} {
      width: #{$value}#{$unit};
    }
  }
  @each $value in $values {
    @media only screen and (min-width: 768px) {
      .md-min-h-#{$value}#{$type} {
        min-height: #{$value}#{$unit};
      }

      .md-h-#{$value}#{$type} {
        height: #{$value}#{$unit};
      }

      .md-min-w-#{$value}#{$type} {
        min-width: #{$value}#{$unit};
      }

      .md-w-#{$value}#{$type} {
        width: #{$value}#{$unit};
      }
    }
  }
}

// === Directions ===

@each $dir in $directions {
  $dirName: nth($dir, 1);
  $dirValue: nth($dir, 2);

  .#{$dirName} {
    display: flex;
    flex-direction: #{$dirValue};
    flex: 1;
  }
}
@each $dir in $directions {
  $dirName: nth($dir, 1);
  $dirValue: nth($dir, 2);

  .md-#{$dirName} {
    @media only screen and (min-width: 768px) {
      display: flex;
      flex-direction: #{$dirValue};
      flex: 1;
    }
  }
}

// === Positions ===

@each $pos in $positions {
  .#{$pos} {
    position: #{$pos};
  }
}

// === Spacing ===

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

$_start: -1 * (1 / $step) * $largest;
$_end: (1 / $step) * $largest;

// -6rem, -5.75rem, -5p5rem ... 6rem
@for $i from $_start through $_end {
  // 0.25 -> 0p25 && -1 -> n1
  $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
  $size: $i * 0.25rem;

  .fs-#{$class-name} {
    font-size: $size;
  }

  .gap-#{$class-name} {
    display: flex;
    gap: $size;
  }

  .lh-#{$class-name} {
    line-height: $size;
  }
}

@for $i from $_start through $_end {
  // 0.25 -> 0p25 && -1 -> n1
  $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
  $size: $i * 0.25rem;

  .md-gap-#{$class-name} {
    @media only screen and (min-width: 768px) {
      display: flex;
      gap: $size;
    }
  }
}

@each $type in $spacing {
  $typeAbbr: nth($type, 1);
  $prop: nth($type, 2);

  @for $i from $_start through $_end {
    $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
    $size: $i * 0.25rem;

    $typeAbbr: nth($type, 1);
    $prop: nth($type, 2);

    .#{$typeAbbr}-#{$class-name} {
      #{$prop}: $size;
    }
  }

  @for $i from $_start through $_end {
    $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
    $size: $i * 0.25rem;

    .md-#{$typeAbbr}-#{$class-name} {
      @media only screen and (min-width: 768px) {
        #{$prop}: $size;
      }
    }
  }
}

@each $side in $sides {
  $sideAbbr: nth($side, 1);
  $sideName: nth($side, 2);

  @each $type in $spacing {
    $typeAbbr: nth($type, 1);
    $prop: nth($type, 2);

    @for $i from $_start through $_end {
      $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
      $size: $i * 0.25rem;

      .#{$typeAbbr}#{$sideAbbr}-#{$class-name} {
        #{$prop}-#{$sideName}: $size;
      }
    }

    @for $i from $_start through $_end {
      $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
      $size: $i * 0.25rem;
      .md-#{$typeAbbr}#{$sideAbbr}-#{$class-name} {
        @media only screen and (min-width: 768px) {
          #{$prop}-#{$sideName}: $size;
        }
      }
    }
  }
}

@each $axis in $axes {
  @each $type in $spacing {
    $typeAbbr: nth($type, 1);
    $prop: nth($type, 2);

    @for $i from $_start through $_end {
      $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
      $size: $i * 0.25rem;

      .#{$typeAbbr}#{$axis}-#{$class-name} {
        @if $axis == "x" {
          #{$prop}-left: $size;
          #{$prop}-right: $size;
        } @else if $axis == "y" {
          #{$prop}-top: $size;
          #{$prop}-bottom: $size;
        }
      }
    }
    @for $i from $_start through $_end {
      $class-name: str-replace(str-replace(#{0.25 * $i}, ".", "p"), "-", "n");
      $size: $i * 0.25rem;

      .md-#{$typeAbbr}#{$axis}-#{$class-name} {
        @media only screen and (min-width: 768px) {
          @if $axis == "x" {
            #{$prop}-left: $size;
            #{$prop}-right: $size;
          } @else if $axis == "y" {
            #{$prop}-top: $size;
            #{$prop}-bottom: $size;
          }
        }
      }
    }
  }
}
